
=====================================================================================
    angular                   angular                    angular

	核心是数据处理
---------------------------------6.26

1、 angular 是js的一个框架采用的是mvc的思想
	（MVC表现与数据分离 m:model   数据：视图 html  c：控件就是js）

2、具有数据的双向绑定，可以是实现单页面开发，拥有路由的功能
3、指令
	ng-app = "定义一个angular模块"  eg ：ng-app = "";
	ng-init = "初始化数据"  eg: ng-init="a=2";
	{{}}是angular的一个输出表达式（模板）
	ng-model=""   //用于数据绑定的主要用在表单(将数据体现在视图里)
	ng-bing=""    等价于{{}}       <div ng-bind="va">  //这个没有闪屏
  ng-repeat="" 可以重复一个HTML 元素
  ng-controller="" 定义一个控制器
  ng-click=""  ;
  ng-checked=""   只有true或者false
  ng-class="obj.div"    动态给一个div绑定一个或多个类名
    注意：如果是一个数组 类名的个数个数组元素一样多
  ng-show=""   true就显示 false就隐藏
  ng-if=""    如果后面的值为false就移除html元素
  ng-include="url"  将外部文件加载进指定div中 与jquery中的$(ele).load('url')方法一样
  ng-href="url"   <a ng-href="{{url}}">  //src一样
  ng-cloak         防止双大括号闪屏

---------------------------
angular传参就是通过 : 号传参
{{angular : newangular}}
因为在以后的路由也会遇到他

--------------------------------
angular的过滤器：
在表达式后面加上 | 加上过滤器名称
  currency  格式化数字为货币格式
  filter     从数组项中选择一个子集
  lowercase   格式化字符串小写
  uppercase   格式化字符串为大写
  orderBy   根据某个表达式排列数组
  date   事件格式 eg : {{date | date:"yyyy-MM-dd hh:mm:ss"}}
  number

  $http  相当于ajax

  $scope.timer=$interval(function(){},1000);   定时器
  $intervar.cancel($scope.timer) 移除定时器

--------------------------------
自定义指令
自定义指令需要用到directive
eg:
myapp.directive("laoZhou",()=>{//驼峰命名
  return {
    restrict:"E",元素调用方法  A元素名、属性E、类名C
    template:"<h1>这是标签1</h1>",
  }
})


注意：如果ng-app="app"加了名字 那就得创建angular模块
            var   app=angular.module('app',[]);//创建angular模块 []是依赖模块
            所有方法属性放在$scope里面 eg: $scope.name="laowang"




  //所有方法放在$scope里面
  <div ng-app="myapp" ng-controller="ctrl">
      <p>{{name}}</p>
  </div>
  var myapp=angular.module('myapp',[]);//创建angular模块  []依赖模块
  myapp.controller('ctrl',function($scope){
    $scope.name="王王"
  })

---------------------
$http:(angular最核心的一个)
第一种写法：
get:    eg:
    $http({
      url:"url";
      method:"GET";
    }).then((res)={
      alert(res);//得到的是对象  需要res.data
    },(err)=>{

    })

    第二种写法：
    get:    eg:
        $http({
          url:"url";
          method:"GET";
        }).success((res)=>{
          alert(res);//直接就得到数据
        }).error((err)=>{
          console.log("错误")
        })
如何传参：
  params://用这个就行
  $http({
    url:"url"，
    method:"GET"，
    params:{"name":"老王"}，
    responseType:"json"
  }).success((res)=>{
    alert(res);//直接就得到数据
  }).error((err)=>{
    console.log("错误")
  })

----------------------------------------6.30
get方式
$http.get

	$http.get("url",{params:{"a":1,"b":2}}).success(function(res){}).error(function(){});

	如果需要给后台传参get方式用params这个属性

post方式：
$http.post
	如果需要用post传参需要转化为formdata
	

固定格式：
	headers:{'Content-Type': 'application/x-www-form-urlencoded'},
	transformRequest: function(obj) {  
	    var str = [];  
	    for(var p in obj){  
                str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));  
	    }  
	    return str.join("&");  
	}  
	eg:
	$http({
                "url":"http://127.0.0.1:8096/6.30-angular/1.php",
                "method":"post",
                "data":{"num1":num1,"num2":num2,"num3":num3},
                'responseType':"json",
                'headers':{"Content-Type":"application/x-www-form-urlencoded"},
                'transformRequest':function(obj){
                    var str=[];
                    for(var p in obj){
                       str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
                    }
                    return str.join("&");  
                }
        }).success(function(res){
            // alert(res);
            $scope.num=res;
        }).error(function(){})

jsonp:
	$http.jsonp("url").success(function(){}).error();
	如果需要jsonp中的callback将cb等于改成 cb=JSON_CALLBACK 就可以了
	

































-----------------------------------了解 2017.5.2
angular是一个MVC框架
Angular 是一个用 HTML 和 JavaScript 或者一个可以编译成
JavaScript 的语言（例如 Dart 或者 TypeScript ），来构建客户端应用的框架。

ng-app 定义一个angular用

ng-init-
	定义初始化数据指令
    相当于js中的变量 多个用;号分开
 eg <div ng-app ng-init='name="wang";age='men'>
        <h1>
           {{name}}
           {{age}}
        </h1>
        //输出wang和men
    </div>

ng-bind:
	用来做差值操作的（看不到页面加载时的大括号）
	为内容绑定一个内容值 他的属性就是要被渲染的内容
  eg;<h1 ng-bind="date">age:{{age}}</h1>


ng-controller 创建作用域
	接受两个参数 第一个参数表示控制器名称
	            第二个参数表示控制器处理函数
	作用域是一个空对象 什么也做不了
	参数是一个空数组  什么也么有
	angular提供一个技术叫做参数注入 什么功能直接在参数里传递

angular内置服务器有个特点都是也$开头的
	作用域名称叫$scope
  eg;app.controller('myCtrl',function($scope){
				$scope.name='qww';//定义变量
				$scope.date='8月'
			})

事件
	ng-click="fn($enevt)"  加上括号

	传入事件对象$enevt
	angular中作用域指向控制器的作用域
