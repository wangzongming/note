css3字体：
<style> 
  @font-face
  {
      font-family: myFirstFont;
      src: url(sansation_light.woff);
  }
  
  div
  {
      font-family:myFirstFont;
  }
</style>

===================弹性盒模型：
flex box  是css3的一种新的布局模式
  是一种当页面需要适应不同屏幕大小以及设备类型时确保元素有恰当的行为的布局方式
  用弹性盒模型的目的是提供一种 更加有效的方式来对一个容器中的子元素进行排列 对齐和分配空白空间

flex-direction  顺序指定了弹性子元素在父容器中的位置
eg:  flex-direction:row;  从左到右排列 （默认方式）
      flex-direction:row-reverse;  反转横向排列  （右对齐 ，从后往前排，最后一项在最前面）
      flex-direction:column; 纵向排列(就是从上往下拍)
      flex-direction:column-reverse;  反转纵向排列，从后往前排 最后一排在最上面

justify-content : 属性应用在弹性容器上 把弹性项沿着弹性容器的主轴线对齐 
  eg: justift-content:flex-start; (默认值) 就是元素向头紧挨着填充
        justify-content:flex-end;  子元素向行尾紧挨着填充
        justify-content:center;  子元素居中紧挨着
        justift-content:space-between; 子元素平均分布在容器中  元素之间间隔一样   左右没有间隔
        justify-content:around;  子元素平均分布在容器中 两边留有一半的空格空间

align-items  设置子元素在侧轴上的对齐方式：（就是在容器的上方还是下方）
  eg: align-items:flex-start;   //正常位置
        align-items:flex-end;   //位于底部
        align-items:flex-center; //居中
        ......
  
flex-wrap：用于指定弹性盒子的子元素换行方式
  eg flex-wrap: nowrap;  //默认不换行 就直接排成一列
       flex-wrap:wrap;弹性容器为多行  会在容器里换行
       flex-wrap:wrap-reverse;  //一行一行的倒过来排序 不是把元素倒过来

align-content ：用于修改flex-wrap属性的行为 类似于 align-items 
                          但是它不是设置子元素的的对齐 而是设置各行的对齐
   
   eg: align-content:stretch; 默认,各行将会延展也占用剩余空间                       
        align-content:center; 居中   
        align-content:flex-end;  //所有元素从下面开始排列
        align-content:flex-start;  所有元素从上面开始排列 
        align-content: flex-center;  和center不一样  区别在于这个会行与行之间的上下间距均分 center只是让他居中 行与行紧挨着的          
        align-content:space-between;  //上下两行紧挨容器上下边  只有两行的话直接一行在上面一行在下面
        align-content:space-arounf;  上下两边会自动空多余的空格的一半出来

弹性子元素属性：
    用整数来定义排序顺序，数值小的排在前面 可以为负值
    eg:
        .flex-one{
            order:-1;
            -webkit-order:-1;
        }

    设置margin值为auto时自动获取弹性盒中剩余的空间
    eg:
        .flex-one{
           margin:auto; //就是居中了
           margin:left; //默认的就是这个样式
           margin:right;  //和left一样
        }

  align-self 用于设置弹性元素在侧轴（纵轴方向的对齐方式）
    eg: align-self:auto | flex-start | flex-end | center | baseline | stretche
    就是设置元素在弹性容器中的位置 flex-end就跑到容器底部了 和bottom有点像

  flex用于指定弹性子元素如何分配空间：
    eg: flex:auto;  计算值为1 1 auto
          flex:initial;  计算值为0 1 auto
          flex:none;  计算值为0 0 auto
          flex:inherit;  从父元素继承
          flex:; .....

        div{
          flex:3;  //直接就是占了3份大小 父容器不需要设置大小
        }

------------------------------------
弹性布局
css存在浏览器的兼容性

chrome的前缀的-webkit
ff 的前缀的-moz
ie的前缀的-ms-
oprea的前缀的-o-

1. width      <768px   的为手机设备
   width      768-992  平板
   width      992-1200 普通笔记本
   widthv     >1200    大屏幕电脑

2.弹性布局
  max-width:992px;最大屏幕不超过992像素
  min-width:600px;最小不低于600像素

3.单位不再用px用rem
	px em rem 的区别
	
	px 就是像素
	em  依据父级设置的font-size有关
	rem  只与根部元素html设置的font-size有关     做手机端用这个
     浏览器默认字体大小为16像素

4.弹性布局 

   需要给父级加display:box:/inline-box/flex/inline-flex;
   子级需要分配个数  box-flex:2;
 box-orient:horizontal(水平的); vertical(垂直的)； 盒子排列方式
 box-direction:normal(正序)；reverse(反序)；   元素排列顺序
 box-pack:start/end/center/justify;  水平上的对齐方式
 box-align:start/center/end;  垂直的对齐方式


---------------------------------------------

css3新增选择器

    常用的标签 id class 通配符 后代 伪类 并集 伪元素 子元素 div>p 交集选择器ul#div

c3新增的   obj是元素  attr是属姓名
    属性选择器obj[attr]{}
指定属性名和属性值的选择器
  obj[attr="value"]{}
指定属性名和属性值且属性值以v开头    v是变量
  obj[attr^="v"]{}
指定属性名和属性值且属性值以v结尾    v是变量
  obj[attr$='v']{}   
指定属性名和属性值且属性值里有v且  跟v的位置无关 (只要值里面有v就行)       v是变量
  obj[attr*='v']{}
指定属性名和属性值且属性值就是value 或以value开头的
  obj[atter|='value']
------------------------
  p:nth-child(1){表示所有父级元素中第一个孩纸必须是p的}
  p:nth-child(3){表示所有父级元素中第三个孩纸必须是p的}
  p:nth-child(odd){选取所有父级中子元素个数为奇数的p}
  p:nth-child(even){选取所有父级中子元素个数为偶数的p}
  p:nth-child(2n-1){选取所有父级中子元素个数为奇数的p}
  p:nth-child(2n){选取所有父级中子元素个数为偶数的p}
-----------------------
  p:nth-of-type(2){选取父元素中所有子元素第二次出现的p,跟位置无关}
-----------------------
  p:first-child{所有父元素中第一个必须是p}
  p:last-child{所有父元素中最后一个必须是p}
  p:first-of-type{从前往后走第1个出现的p和位置无关}
  p:last-of-type{从后往前走第1个出现的p和位置无关}
  P:only-child{父级中只有一个元素 且这个元素必须是p}
  p:only-of-type{父级中只能有一个p跟子级的个数无关}


                           假如在一个元素设置了行内样式怎么在css里面给它设置样式
           答案:  !important  权重10000

---------------------------------
transform 转换   
            translete()平移 
            rotate(xx deg)旋转  
            skew(deg)扭曲  
            scale()缩放

  1.transform:translate(x,y);  沿着水平向右移动x像素 在向下移动y像素

   transition  过渡：
   transtion:属性名   时间；

动画  animation:动画名name   动画周期时间s 动画速度linear  动画次数infinite
   首先定义一个动画然后执行动画
   定义动画@keyframes 动画名 {
   from{}  0%{}
   to({}    100%{}
 }
 
 停止动画：animation-play-state:paused; 有前缀

------------------------------------------------------------------------------

transform  3d 近大远小

    平移:
      translateX(30px) 水平向右移动30像素 
      translateY(30px) 垂直向下移动30像素 
      translateZ(30px) 

   旋转：
      rotateX(30deg)围绕着x轴旋转30渡
      rotateY(30deg)围绕着y轴旋转30渡
      rotateZ(30deg)围绕着z轴旋转30渡
      
     
	 perspective:1000;  视距 只能给做3d转换元素的父级（近大远小）800-1000最好
	 transform-style:preserve-3d;  给这个元素的子元素 一个三d空间 
	 transform-origin    3d转换的位置x y z(只能用数字) 旋转轴 center left right % 0
	 
 多媒体查询：                                                                 768 992 1200
      @media 设备
      @media screen  屏幕
      @media print   打应机
      @media speech  阅读器
      **@media screen and (max-width:768px){
                  0-768
      }                
        @media screen and (min-width:768px) and (max-width:992px){
                 768px-992px
        }
        @media screen and (min-width:1200){
                  1200-
        }
引入文件
<link rel="stylesheet" href="1.css" type="text/css" media="screen and (min-width:600px)"/>
<link rel="stylesheet" href="2.css" type="text/css" media="screen and (min-width:350px) and (max-width:600px)"/>

 盒子边框
    border-radius<边框圆角> 
    border-radius:100px 100px 100px 100px/100px 100px 100px 100px  .....
 盒子阴影
    box-shadow x y r color; inset内
 三角形
 。。。。。
 0
 渐变 
    background:linear-gradient()
    background:radial-gradient()
eg:
linear-gradient(#fff, #333);
linear-gradient(to bottom, #fff, #333);
linear-gradient(to top, #333, #fff);
linear-gradient(180deg, #fff, #333);
linear-gradient(to bottom, #fff 0%, #333 100%);
 
 透明度 
	 opacity:0.2;
	 background:rgba();
 ie8以下
     opacity:0.6;
  	 background:rgba(12,15,16,0.6);
	 filter:alpha(opacity=30);/*iegao版本*/
	 -ms-filter："progid:DXImageTransform.Microsoft.ALpha(Opacity=30)";
	 
opacity会把内容透明  区别
 ---------------------------
滚动条美化 scroll
 
    &::-webkit-scrollbar-track {  
    box-shadow: 1px 1px 5px  #66FFFF inset;  
    }  
  
    &::-webkit-scrollbar-thumb {  
    min-height: 20px;  
    background-clip: content-box;  
    box-shadow: 0 0 0 5px #33FF66 inset;  
    }  
  
    &::-webkit-scrollbar-corner {  
    background: transparent;  
    }  
 
------------------------------------------------------------------

css中那些属性会继承：font 
------------------------------------------------------------------

     移动端:        <mete name="viewport"
                    content="width=device-width,
                    initial-scale=1,minimum-scale=1,maximum-scale=1,
                    user-scalable=no "/>